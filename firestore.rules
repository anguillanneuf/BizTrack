
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to get user data (like their role)
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // User profiles:
    // - Allow read if the user is authenticated (e.g., for listing admins, or future profile page)
    // - Allow create if user is signing up (uid matches doc id)
    // - Allow update if the user is the owner of the profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      // Deleting user profiles might be restricted or handled by a specific admin function
      allow delete: if false; // Or request.auth.uid == userId for self-delete
    }

    // Rules for user-specific subcollections (incomes, expenses, appointments)
    // This rule applies to paths like /users/{userId}/incomes/{incomeId}, /users/{userId}/expenses/{expenseId}, etc.
    match /users/{userId}/{collection}/{documentId} {
      // Allow read if the requesting user is the owner of the data
      allow read: if request.auth.uid == userId;

      // Allow write (create, update, delete) if the user is the owner
      // No longer need to check for admin role for self-management
      allow write: if request.auth.uid == userId;
    }

    // Fallback rule: Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
